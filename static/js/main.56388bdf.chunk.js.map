{"version":3,"sources":["components/cardSort/CardSort.js","components/dataValidation/DataValidation.js","App.js","reportWebVitals.js","index.js"],"names":["CardSort","props","useState","deck","setDeck","testDeck","setTestDeck","sortedDeck","setSortedDeck","suits","values","sortDeck","sortingDeck","sortOrder","deckToSort","i","length","d","value","suit","card","sort","push","a","b","useEffect","newDeck","cardCounter","v","s","createReferenceDeck","createTestDeck","renderIcon","iconName","Container","className","Row","Col","Button","size","color","onClick","event","shuffleDeck","location1","Math","floor","random","location2","tempCard","suffleDeck","map","index","xs","DataValidation","Contacts","contactList","nameList","setNameList","cityList","setCityList","validateContacts","contactNames","cityNames","findIndex","city","cityName","validationErrors","fillCityNames","dataValidMessage","emailValid","phoneValid","emailRegex","RegExp","phoneRegex","test","emailAddress","phoneNumber","contactName","fullName","name","App","Navbar","light","Nav","NavItem","to","NavbarText","href","Jumbotron","fluid","class","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56388bdf.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {Container, Col, Row, Button} from \"reactstrap\";\n\nconst CardSort = (props) => {\n\n    const [deck, setDeck] = useState([]);\n    const [testDeck, setTestDeck] = useState([]);\n    const [sortedDeck, setSortedDeck] = useState([]);\n    const [suits, setSuits] = useState([\"Hearts\", \"Diamonds\", \"Clubs\", \"Spades\"]);\n    const [values, setValues] = useState([\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"]);\n\n    const createReferenceDeck = () => {\n        let newDeck = [];\n        let cardCounter = 1;\n    \n        for (let v = 0; v < values.length; v++) {\n            for (let s = 0; s < suits.length; s++) {\n                let card = {value: values[v], suit: suits[s], sort: cardCounter};\n                newDeck.push(card);\n                cardCounter++;\n            };\n        };\n    \n        setDeck(newDeck);\n        // return newDeck;\n    };\n\n    const createTestDeck = () => {\n        let newDeck = [];\n\n        for (let s = 0; s < suits.length; s++) {\n            for (let v = 0; v < values.length; v++) {\n                let card = {value: values[v], suit: suits[s]};\n                newDeck.push(card);\n            };\n        };\n    \n        setTestDeck(newDeck);\n        setSortedDeck(newDeck);\n        // return newDeck;\n    };\n\n    const suffleDeck = () => {\n\n        let shuffleDeck = [...sortedDeck];\n\n        // https://www.thatsoftwaredude.com/content/6196/coding-a-card-deck-in-javascript\n        // for 1000 turns\n        // switch the values of two random cards\n        for (let i = 0; i < 1000; i++) {\n            let location1 = Math.floor((Math.random() * shuffleDeck.length));\n            let location2 = Math.floor((Math.random() * shuffleDeck.length));\n            let tempCard = shuffleDeck[location1];\n\n            shuffleDeck[location1] = shuffleDeck[location2];\n            shuffleDeck[location2] = tempCard;\n        };\n\n        setSortedDeck(shuffleDeck);\n\n    };\n\n    const sortDeck = (sortingDeck, sortOrder) => {\n\n        let deckToSort = [...sortingDeck];\n        // console.log(\"CardSort.js sortDeck deckToSort\", deckToSort);\n        let sortedDeck = [];\n\n        // loop through the array\n        // find a match with deck based on suit and value\n        // copy the sort to a new object to push into new array\n\n        for (let i = 0; i < deckToSort.length; i++) {\n            // console.log(\"CardSort.js sortDeck deckToSort[i]\", deckToSort[i]);\n            // console.log(\"CardSort.js sortDeck deckToSort[i].value\", deckToSort[i].value);\n            // console.log(\"CardSort.js sortDeck deckToSort[i].suit\", deckToSort[i].suit);\n\n            // console.log(\"CardSort.js sortDeck deck\", deck);\n\n            for (let d = 0; d < deck.length; d++) {\n\n                if (deckToSort[i].value === deck[d].value && deckToSort[i].suit === deck[d].suit) {\n                    // console.log(\"CardSort.js sortDeck deck[d]\", deck[d]);\n                    // console.log(\"CardSort.js sortDeck deck[d].value\", deck[d].value);\n                    // console.log(\"CardSort.js sortDeck deck[d].suit\", deck[d].suit);\n                    // console.log(\"CardSort.js sortDeck deck[d].sort\", deck[d].sort);\n                    let card = {value: deckToSort[i].value, suit: deckToSort[i].suit, sort: deck[d].sort};\n                    // console.log(\"CardSort.js sortDeck card\", card);\n                    sortedDeck.push(card);\n                };\n\n            };\n\n            // let foundCard = deck.find(card => {\n            //     return card.value === deckToSort[i].value && card.value === deckToSort[i].suit\n            // });\n            // console.log(\"CardSort.js sortDeck foundCard\", foundCard);\n\n            // let card = {value: deckToSort[i].value, suit: deckToSort[i].suit, sort: result.sort};\n            // sortedDeck.push(card);\n\n        };\n\n        // sortedDeck.sort((a, b) => (a.sort > b.sort) ? 1 : -1);\n        // reverse the sort\n        // sortedDeck.sort((a, b) => (a.sort > b.sort) ? -1 : 1);\n\n        if (sortOrder === \"ASC\") {\n            sortedDeck.sort((a, b) => (a.sort > b.sort) ? 1 : -1);\n        } else if (sortOrder === \"DESC\") {\n            sortedDeck.sort((a, b) => (a.sort > b.sort) ? -1 : 1);\n        } else {\n            sortedDeck.sort((a, b) => (a.sort > b.sort) ? 1 : -1);\n        };\n\n        setSortedDeck(sortedDeck);\n        return sortedDeck;\n    };\n\n    useEffect(() => {\n        // console.log(\"CardSort.js useEffect getDeck\");\n        createReferenceDeck();\n        createTestDeck();\n    }, []);\n\n    useEffect(() => {\n        // console.log(\"CardSort.js useEffect deck\", deck);\n    }, [deck]);\n\n    useEffect(() => {\n        // console.log(\"CardSort.js useEffect testDeck\", testDeck);\n\n        // sortDeck(testDeck);\n\n    }, [testDeck]);\n\n    const renderIcon = (iconName) => {\n\n        switch (iconName) {\n            case \"Hearts\":\n                return \"♥\";\n            case \"Diamonds\":\n                return \"♦\";\n            case \"Clubs\":\n                return \"♣\";\n            case \"Spades\":\n                return \"♠\";\n            default:\n                return \"\";\n          };\n\n    };\n\n    return(\n        <Container className=\"mb-5\">\n            <Row className=\"my-4\">\n                <Col>\n                    <h2 className=\"text-center\">Card Sorting</h2>\n                </Col>\n            </Row>\n            <Row className=\"my-4\">\n                <Col>\n                    <Button size=\"lg\" color=\"primary\" onClick={(event) => {/*console.log(event.target.value);*/ suffleDeck();}}>Shuffle</Button>\n                </Col>\n                <Col>\n                    <Button size=\"lg\" color=\"primary\" onClick={(event) => {/*console.log(event.target.value);*/ sortDeck(testDeck, \"ASC\");}}>Sort Ascending</Button>\n                </Col>\n                <Col>\n                    <Button size=\"lg\" color=\"primary\" onClick={(event) => {/*console.log(event.target.value);*/ sortDeck(testDeck, \"DESC\");}}>Sort Descending</Button>\n                </Col>\n            </Row>\n            <Row>\n                {sortedDeck.map((card, index) => {\n                return (\n                    <Col key={index} xs=\"1\" className=\"m-1 py-2 border\">\n                        <h2 className=\"text-center\">{card.value}</h2>\n                        <h1 className=\"text-center\">{renderIcon(card.suit)}</h1>\n                    </Col>\n                    )\n                })}\n            </Row>\n        </Container>\n    );\n\n};\n\nexport default CardSort;","import React, {useState, useEffect} from \"react\";\nimport {Container, Col, Row} from \"reactstrap\";\nimport Contacts from \"./Contacts.json\";\n\nconst DataValidation = (props) => {\n\n    // let contactList = [...Contacts];\n    const [contactList, setContactList] = useState([...Contacts]);\n    const [nameList, setNameList] = useState([]);\n    const [cityList, setCityList] = useState([]);\n\n    const fillCityNames = () => {\n        let cityNames = [];\n\n        for (let i = 0; i < contactList.length; i++) {\n\n            // console.log(\"DataValidation.js fillCityNames cityNames.includes(contactList[i].cityName)\", cityNames.includes(contactList[i].cityName));\n            // console.log(\"DataValidation.js fillCityNames cityNames.findIndex((city) => city.cityName === contactList[i].cityName)\", cityNames.findIndex((city) => city.cityName === contactList[i].cityName));\n\n            if (cityNames.findIndex((city) => city.cityName === contactList[i].cityName) === -1) {\n                cityNames.push({cityName: contactList[i].cityName, validationErrors: 0});\n            };\n\n        };\n\n        // setCityList(cityNames);\n        return cityNames;\n\n    };\n\n    const validateContacts = () => {\n\n        let contactNames = [];\n        let cityNames = fillCityNames();\n        // console.log(\"DataValidation.js validateContacts cityNames\", cityNames);\n\n        for (let i = 0; i < contactList.length; i++) {\n\n            let dataValidMessage = \"\";\n            let emailValid = false;\n            let phoneValid = false;\n\n            let emailRegex = new RegExp(/^[^@]+[@][^@]+$/);\n            let phoneRegex = new RegExp(/^[\\d -]*$/);\n\n            if (emailRegex.test(contactList[i].emailAddress)) {\n                emailValid = true;\n            } else {\n                emailValid = false;\n                // console.log(\"cityNames.findIndex((city) => city.cityName === contactList[i].cityName)\", cityNames.findIndex((city) => city.cityName === contactList[i].cityName));\n                cityNames[cityNames.findIndex((city) => city.cityName === contactList[i].cityName)].validationErrors = cityNames[cityNames.findIndex((city) => city.cityName === contactList[i].cityName)].validationErrors + 1;\n            };\n\n            if (phoneRegex.test(contactList[i].phoneNumber)) {\n                phoneValid = true;\n            } else {\n                phoneValid = false;\n                // console.log(\"cityList.findIndex((city) => city.cityName === contactList[i].cityName)\", cityList.findIndex((city) => city.cityName === contactList[i].cityName));\n                cityNames[cityNames.findIndex((city) => city.cityName === contactList[i].cityName)].validationErrors = cityNames[cityNames.findIndex((city) => city.cityName === contactList[i].cityName)].validationErrors + 1;\n            };\n\n\n            if (emailValid && phoneValid) {\n                dataValidMessage = \"Valid\";\n            } else if (!emailValid && !phoneValid) {\n                dataValidMessage = \"Email and Phone are invalid.\";\n            } else if (!emailValid) {\n                dataValidMessage = \"Email is invalid.\";\n            } else if (!phoneValid) {\n                dataValidMessage = \"Phone is invalid.\";\n            };\n\n            let contactName = {fullName: contactList[i].fullName, emailValid: emailValid, emailAddress: contactList[i].emailAddress, phoneValid: phoneValid, phoneNumber: contactList[i].phoneNumber, dataValidMessage: dataValidMessage};\n\n            contactNames.push(contactName);\n        };\n\n\n        contactNames.sort((a, b) => (a.fullName > b.fullName) ? 1 : -1);\n\n        cityNames.sort((a, b) => (a.validationErrors > b.validationErrors) ? -1 : 1);\n\n        setNameList(contactNames);\n        setCityList(cityNames);\n\n    };\n\n    useEffect(() => {\n        // console.log(\"DataValidation.js useEffect Contacts\", Contacts);\n        validateContacts();\n    }, []);\n\n    return(\n        <Container className=\"mb-5\">\n            <Row className=\"my-4\">\n                <Col>\n                    <h2 className=\"text-center\">Data Validation</h2>\n                </Col>\n            </Row>\n            {/* {contactList.map((contact, index) => {\n            return (\n                <Row key={index}>\n                    <Col>{contact.fullName}</Col>\n                    <Col>{contact.cityName}</Col>\n                    <Col>{contact.phoneNumber}</Col>\n                    <Col>{contact.emailAddress}</Col>\n                </Row>\n                )\n            })} */}\n            <Row>\n                <Col>\n                {nameList.map((name, index) => {\n                return (\n                    <Row key={index}>\n                        <Col>{name.fullName}</Col>\n                        {/* <Col>{name.emailValid.toString()}||{name.emailAddress}</Col>\n                        <Col>{name.phoneValid.toString()}||{name.phoneNumber}</Col> */}\n                        <Col>{name.dataValidMessage}</Col>\n                    </Row>\n                    )\n                })}\n                </Col>\n                <Col>\n                {cityList.map((city, index) => {\n                return (\n                    <Row key={index}>\n                        <Col>{city.cityName}</Col>\n                        <Col>{city.validationErrors}</Col>\n                    </Row>\n                    )\n                })}\n                </Col>\n            </Row>\n        </Container>\n    );\n\n};\n\nexport default DataValidation;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Switch, Route, Link} from \"react-router-dom\";\nimport {Container, Col, Row, Nav, Navbar, NavItem, NavbarText, Jumbotron} from \"reactstrap\";\nimport CardSort from \"./components/cardSort/CardSort\"\nimport DataValidation from \"./components/dataValidation/DataValidation\"\n\nfunction App() {\n  return (\n\n    <BrowserRouter>\n    <Navbar color=\"light\" light>\n      <Nav>\n        <NavItem className=\"mx-2\">\n            <Link to=\"/cardSort\"><NavbarText>Card Sort</NavbarText></Link>\n        </NavItem>\n        <NavItem className=\"mx-2\">\n            <Link to=\"/dataValidation\"><NavbarText>Data Validation</NavbarText></Link>\n        </NavItem>\n        <NavItem className=\"mx-2\">\n          <a href=\"/teamIntroduction.html\"><NavbarText>Team Introduction</NavbarText></a>\n        </NavItem>\n      </Nav>\n    </Navbar>\n\n      <Jumbotron fluid>\n        <Container>\n          <h1 class=\"display-4\">MetroNet Developer Test</h1>\n        </Container>\n      </Jumbotron>\n\n      <Container className=\"my-4\">\n        <Row>\n          <Col>\n          <Switch>\n            <Route exact path=\"/cardSort\" component={CardSort} />\n            <Route exact path=\"/dataValidation\" component={DataValidation} />\n          </Switch>\n          </Col>\n        </Row>\n      </Container>\n\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}